{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\Net/assets\\Script\\Net\\OnFire.ts"],"names":[],"mappings":";;;;;;AAUE;;;;;;;;;;;GAWG;AACL;IAAA;QAMI,WAAW;QACX,OAAE,GAAe,EAAE,CAAC;IA8DtB,CAAC;IA5DC,mBAAE,GAAF,UAAG,SAAiB,EAAE,EAAY,EAAE,IAAqB;QAArB,qBAAA,EAAA,YAAqB;QACvD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;YACvB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SACzB;QAED,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC;YACtB,EAAE,IAAA;YACF,IAAI,MAAA;SACL,CAAC,CAAC;IACL,CAAC;IAED,qBAAI,GAAJ,UAAK,SAAiB,EAAE,EAAY;QAClC,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,qBAAI,GAAJ,UAAK,SAAiB;QAAE,gBAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,+BAAgB;;QACtC,IAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAE3C,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;QAEzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAG,EAAE;YACrB,IAAA,iBAA2B,EAAzB,UAAE,EAAE,cAAqB,CAAC;YAElC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAEvB,IAAI,IAAI,EAAE;gBACR,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvB,CAAC,EAAG,CAAC;gBACL,CAAC,EAAG,CAAC;aACN;SACF;IACH,CAAC;IAED,oBAAG,GAAH,UAAI,SAAkB,EAAE,EAAa;QACnC,YAAY;QACZ,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;SACd;aAAM;YACL,IAAI,EAAE,KAAK,SAAS,EAAE;gBACpB,kCAAkC;gBAClC,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;aAC3B;iBAAM;gBACL,IAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBAC3C,+BAA+B;gBAC/B,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAG,EAAE;oBAC3B,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;wBAC1B,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACvB,CAAC,EAAG,CAAC;wBACL,CAAC,EAAG,CAAC;qBACN;iBACF;aACF;SACF;IACH,CAAC;IAED,gBAAgB;IAChB,qBAAI,GAAJ,UAAK,SAAiB;QAAE,gBAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,+BAAgB;;QACtC,IAAI,CAAC,IAAI,OAAT,IAAI,GAAM,SAAS,SAAK,MAAM,GAAE;IAClC,CAAC;IAlEsB,eAAQ,GAAY,IAAI,MAAM,EAAE,CAAC;IAEjD,UAAG,GAAG,aAAa,CAAC;IAiE7B,aAAC;CArEH,AAqEG,IAAA;AACY,QAAA,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Net","sourcesContent":["\nexport interface Listener {\n    cb: Function;\n    once: boolean;\n  }\n  \n  export interface EventsType {\n    [eventName: string]: Listener[];\n  }\n  \n  /**\n   * const ee = new OnFire();\n   *\n   * ee.on('click', (...values) => {});\n   *\n   * ee.on('mouseover', (...values) => {});\n   *\n   * ee.emit('click', 1, 2, 3);\n   * ee.fire('mouseover', {}); // same with emit\n   *\n   * ee.off();\n   */\nclass OnFire {\n  \n    public static readonly Instance : OnFire = new OnFire();\n\n    static ver = '__VERSION__';\n  \n    // 所有事件的监听器\n    es: EventsType = {};\n  \n    on(eventName: string, cb: Function, once: boolean = false) {\n      if (!this.es[eventName]) {\n        this.es[eventName] = [];\n      }\n  \n      this.es[eventName].push({\n        cb,\n        once,\n      });\n    }\n  \n    once(eventName: string, cb: Function) {\n      this.on(eventName, cb, true);\n    }\n  \n    fire(eventName: string, ...params: any[]) {\n      const listeners = this.es[eventName] || [];\n  \n      let l = listeners.length;\n  \n      for (let i = 0; i < l; i ++) {\n        const { cb, once } = listeners[i];\n  \n        cb.apply(this, params);\n  \n        if (once) {\n          listeners.splice(i, 1);\n          i --;\n          l --;\n        }\n      }\n    }\n  \n    off(eventName?: string, cb?: Function) {\n      // clean all\n      if (eventName === undefined) {\n        this.es = {};\n      } else {\n        if (cb === undefined) {\n          // clean the eventName's listeners\n          delete this.es[eventName];\n        } else {\n          const listeners = this.es[eventName] || [];\n          // clean the event and listener\n          let l = listeners.length;\n          for (let i = 0; i < l; i ++) {\n            if (listeners[i].cb === cb) {\n              listeners.splice(i, 1);\n              i --;\n              l --;\n            }\n          }\n        }\n      }\n    }\n  \n    // cname of fire\n    emit(eventName: string, ...params: any[]) {\n      this.fire(eventName, ...params);\n    }\n  }\n  export const G_OnFire = OnFire.Instance;\n"]}